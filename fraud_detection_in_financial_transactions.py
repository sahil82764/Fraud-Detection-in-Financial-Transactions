# -*- coding: utf-8 -*-
"""Fraud Detection in Financial Transactions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aUB9j_opUi3Hf4mDM7xSUOMiGOtvlQ2q

# **AIDI 2005 - CAPSTONE TERM II**

## **Fraud Detection in Financial Transactions**

#### GROUP MEMBERS
1. Saurabh Singh – 100934083
2. Varun Mistry – 100942692
3. Sahil Khan – 100942935
4. Chinedu Omenkukwu - 100805353

## UPLOADING THE DATA
"""

from google.colab import files

uploaded = files.upload()

# Load the dataset
data = pd.read_csv('/content/Fraud.csv')
data

"""## IMPORTING THE LIBRARIES"""

# Importing the libraries
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.ensemble import IsolationForest
from sklearn.metrics import classification_report
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.pipeline import Pipeline

"""## DATA PROCESSING"""

# Splitting data into X and y
X = data.drop(columns=["isFraud", "isFlaggedFraud"])
y = data["isFraud"]

# Define categorical and numerical features
categorical_features = ["type", "nameOrig", "nameDest"]
numerical_features = ["step", "amount", "oldbalanceOrg", "newbalanceOrig", "oldbalanceDest", "newbalanceDest"]

# Preprocessing for numerical data
numerical_transformer = StandardScaler()

# Preprocessing for categorical data
categorical_transformer = OneHotEncoder(handle_unknown="ignore")

# Bundle preprocessing for numerical and categorical data
preprocessor = ColumnTransformer(
    transformers=[
        ("num", numerical_transformer, numerical_features),
        ("cat", categorical_transformer, categorical_features)
    ])

"""## MODEL BUILDING

### 1. IsolationForest
"""

# Experimenting with a tree based model

# Define the model
model = IsolationForest(random_state=42)

# Bundle preprocessing and modeling code in a pipeline
pipeline = Pipeline(steps=[
    ("preprocessor", preprocessor),
    ("model", model)
])

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""## MODEL TRAINING AND EVALUATION"""

# Train the model
pipeline.fit(X_train, y_train)

# Make predictions
y_pred = pipeline.predict(X_test)

# Evaluate the model
print(classification_report(y_test, y_pred))

# Histograms of numerical features
data[numerical_features].hist(figsize=(12, 8))
plt.tight_layout()
plt.show()

# Countplots of categorical features
# Countplots of categorical features
plt.figure(figsize=(12, 8))
for i, col in enumerate(categorical_features, 1):
    plt.subplot(2, 2, i)
    sns.countplot(x=col, data=data)
    plt.title(col)
plt.tight_layout()
plt.show()

# Confusion matrix
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues")
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.title("Confusion Matrix")
plt.show()

"""### 2. LogisticRegression"""

# Preprocess data (e.g., scale numerical features, encode categorical variables)
numeric_features = X.select_dtypes(include=['float64', 'int64']).columns
categorical_features = X.select_dtypes(include=['object']).columns

numeric_transformer = StandardScaler()
categorical_transformer = OneHotEncoder(handle_unknown='ignore')  # or handle_unknown='value' with a specific value

preprocessor = ColumnTransformer(
    transformers=[
        ('num', numeric_transformer, numeric_features),
        ('cat', categorical_transformer, categorical_features)])

# Append classifier to preprocessing pipeline.
# Now we have a full prediction pipeline.
clf = Pipeline(steps=[('preprocessor', preprocessor),
                      ('classifier', LogisticRegression())])

# Train the model
clf.fit(X_train, y_train)

# Evaluate the model
y_pred = clf.predict(X_test)
print("Logistic Regression:")
print(classification_report(y_test, y_pred))

"""### 3. ArtificialNeuralNetwork ANN"""

# Separate features and target variable
X = data.drop(columns=['isFraud', 'nameOrig', 'nameDest'])  # Exclude non-numeric columns and target variable
y = data['isFraud']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Preprocess data (e.g., scaling numerical features and one-hot encoding categorical features)
numeric_features = X.select_dtypes(include=['float64']).columns.tolist()
categorical_features = X.select_dtypes(include=['object']).columns.tolist()

# Define preprocessing steps
numeric_transformer = StandardScaler()
categorical_transformer = OneHotEncoder()

# Create preprocessing pipeline
preprocessor = ColumnTransformer(
    transformers=[
        ('num', numeric_transformer, numeric_features),
        ('cat', categorical_transformer, categorical_features)
    ])

# Fit preprocessing pipeline on training data
preprocessor.fit(X_train)

# Apply preprocessing pipeline to training and testing data
X_train_preprocessed = preprocessor.transform(X_train)
X_test_preprocessed = preprocessor.transform(X_test)

# Define the neural network model
model = Sequential([
    Dense(64, activation='relu', input_shape=(X_train_preprocessed.shape[1],)),
    Dense(32, activation='relu'),
    Dense(1, activation='sigmoid')
])

# Compile the model
model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

# Train the model
history = model.fit(X_train_preprocessed, y_train, epochs=10, validation_split=0.2)

# Evaluate the model
loss, accuracy = model.evaluate(X_test_preprocessed, y_test)
print("Test Accuracy:", accuracy)